const pokemonID = document.getElementById('pokemon-id');
const pokemonName = document.getElementById('pokemon-name');
const spriteContainer = document.getElementById('sprite-container');
const types = document.getElementById('types');
const height = document.getElementById('height');
const weight = document.getElementById('weight');
const hp = document.getElementById('hp');
const attack = document.getElementById('attack');
const defense = document.getElementById('defense');
const specialAttack = document.getElementById('special-attack');
const specialDefense = document.getElementById('special-defense');
const speed = document.getElementById('speed');
const searchForm = document.getElementById('search-form');
const searchInput = document.getElementById('search-input');



const getPokemon = async () => {
  try {
    const pokemonNameOrId = searchInput.value.toLowerCase();
    const response = await fetch(
      `https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/${pokemonNameOrId}`
    );
    const data = await response.json();

    // Set Pokémon info
    pokemonName.textContent = `${data.name.toUpperCase()}`;
    pokemonID.textContent = `#${data.id}`;
    weight.textContent = `Weight: ${data.weight}`;
    height.textContent = `Height: ${data.height}`;
    spriteContainer.innerHTML = `
      <img id="sprite" src="${data.sprites.front_default}" alt="${data.name} front default sprite">
    `;

    // Set stats
    hp.textContent = data.stats[0].base_stat;
    attack.textContent = data.stats[1].base_stat;
    defense.textContent = data.stats[2].base_stat;
    specialAttack.textContent = data.stats[3].base_stat;
    specialDefense.textContent = data.stats[4].base_stat;
    speed.textContent = data.stats[5].base_stat;

    // Set types
    types.innerHTML = data.types
      .map(obj => `<span class="type ${obj.type.name}">${obj.type.name}</span>`)
      .join('');
  } catch (err) {
    resetDisplay();
    alert('Pokémon not found');
    console.log(`Pokémon not found: ${err}`);
  }
};

getText("fetch_info.txt");

async function getText(file) {
  let myObject = await fetch(file);
  let myText = await myObject.text();
  document.getElementById("demo").innerHTML = myText;
}


async function getText(file) {
    let myObject = await fetch(file);
    let myText = await myObject.text();
    myDisplay(myText);
  }









  if ((Number(pokemon) > 1025) || (Number(pokemon) < 1) || (Number(pokemon) < 10001) || (Number(pokemon) > 10277)) {
    document.getElementById('warn').innerHTML = "Invalid Pokémon name or id"               
}else {
    if (Number(pokemon) > 1025){ document.getElementById('warn').innerHTML = 'Invalid Pokémon name or id' }
    else { ponerInfo(pokemon);}
}



if ( ((Number(pokemon) >= 1) && (Number(pokemon) <=1025)) || ((Number(pokemon >= 10001)) && (Number(pokemon) <= 10277)))
  { ponerInfo(pokemon);}
else 
  { document.getElementById('warn').innerHTML = "Invalid Pokémon name or id";}






  if (/^[A-z]+$/.test(pokemon)){
    ponerInfo(pokemon.toLowerCase());
    }
else { 
    if ((/^[A-z]+[-][f]$/.test(pokemon)) || (/^[m][r][-][A-z]+$/.test(pokemon)))
         { 
            ponerInfo(pokemon.toLowerCase());
    }
    else 
    {  document.getElementById('warn').innerHTML = 'Invalid Pokémon name or id';
    }
}  



if ((/^[A-z]+$/.test(pokemon)) || (/^[A-z]+[-][f]$/.test(pokemon)) || (/^[m][r][-][A-z]+$/.test(pokemon)))
  {}
else 
  {document.getElementById('warn').innerHTML = "Invalid Pokémon name or id";}



  function existePokemon( pname){     
    fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/')
         .then((res) => {
              if (!res.ok) {
                   throw new Error (`HTTP error! Status: ${res.status}`); }
              return res.json();
              })   
         .then((data) => {
              for (let i=0; i< data.results.length; i++){
                   if (data.results[i].name == pname.toUpperCase()){
                        flag = true;
                        break;
                   }
              }              
              })
         .catch((error) => 
              console.error("Unable to fetch data:", error));
}















  function existePokemon(pname){
    if ((/^[A-z]+$/.test(pname)) || (/^[A-z]+[-][f]$/.test(pname)) || (/^[m][r][-][A-z]+$/.test(pname)))
         {
         fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/')
         .then((res) => {
              if (!res.ok) {
                   throw new Error (`HTTP error! Status: ${res.status}`); }
              return res.json();
              })   
         .then((data) => 
              {    let myObject = data;                    
                   console.log(myObject.results[0].name);
                   for (let i=0; i< myObject.results.length; i++){
                        if (myObject.results[i].name == pname.toUpperCase()){
                             flag = true;
                        }else { flag = false;} 
                   }
              })
         .catch((error) => 
                   console.error("Unable to fetch data:", error));
         }
    else 
         {flag = false;}     
    
} 





async function existePokemon(pname){
  if ((/^[A-z]+$/.test(pname)) || (/^[A-z]+[-][f]$/.test(pname)) || (/^[m][r][-][A-z]+$/.test(pname)))
       {
        const response = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/')
        const myObject = await response.json();
        const poke = pname.toLowerCase();           
        for (let i=0; i< myObject.results.length; i++){
            if (myObject.results[i].name == poke){
                 flag = true;
                 break;                   
            }
        }
        
       }    
} 



function existePokemon(pname){     

  fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/')
  .then((res) => {
            if (!res.ok) {
                 throw new Error (`HTTP error! Status: ${res.status}`); }
            return res.json();
            })   
  .then((data) => 
            {    let myObject = data;                    
                 console.log(myObject.results[0].name);
                 // if ((/^[A-z]+$/.test(pname)) || (/^[A-z]+[-][f]$/.test(pname)) || (/^[m][r][-][A-z]+$/.test(pname)))
                 for (let i=0; i< myObject.results.length; i++){
                      if (myObject.results[i].name == pname.toUpperCase()){
                           flag = true;
                           break;
                      }
                 }
            })
       .catch((error) => 
                 console.error("Unable to fetch data:", error));
           
} 



function existePokemon(pname){
  //if ((/^[A-z]+$/.test(pname)) || (/^[A-z]+[-][f]$/.test(pname)) || (/^[m][r][-][A-z]+$/.test(pname)))
       //{
        const response =  fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/')
        const myObject =  response.json();
        const poke = pname.toLowerCase();           
        for (let i=0; i< myObject.results.length; i++){
            if (myObject.results[i].name == poke){
                 flag = true;
                 break;                   
            }
        }
        
       //}    
} 

function existePokemon(pname){     

  fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/')
  .then((res) => {
            if (!res.ok) {
                 throw new Error (`HTTP error! Status: ${res.status}`); }
            return res.json();
            })   
  .then((data) => 
            {    //let myObject = data;                    
                 //console.log(myObject.results[0].name);
                 // if ((/^[A-z]+$/.test(pname)) || (/^[A-z]+[-][f]$/.test(pname)) || (/^[m][r][-][A-z]+$/.test(pname)))
                 for (let i=0; i< data.results.length; i++){
                      if (data.results[i].name == pname.toUpperCase()){
                           flag = true;
                           break;
                      }
                 }
            })
       .catch((error) => 
                 console.error("Unable to fetch data:", error));
           
} 

async function existePokemon(pname){
               
     const response = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/')
     const myObject = await response.json();
     const poke = pname.toLowerCase();           
     for (let i=0; i< myObject.results.length; i++){
          if (myObject.results[i].name == poke){
               flag = true;
               break; }
          }        
             
   } 



function searchP(){
     ponerBlanco();
     flag = false;     
     let pokemon = document.getElementById('search-input').value;  
     if  (!isNaN(pokemon) ){ 
          if ( ((Number(pokemon) >= 1) && (Number(pokemon) <=1025)) || ((Number(pokemon >= 10001)) && (Number(pokemon) <= 10277)))
               { ponerInfo(pokemon);}
          else 
               { document.getElementById('warn').innerHTML = "Invalid Pokémon name or id";}
          }
     else {           
          existePokemon(pokemon);            
          if (flag)
               {ponerInfo(pokemon.toLowerCase());}
          else 
               {document.getElementById('warn').innerHTML = "Invalid Pokémon name or id";}          
     }

}

